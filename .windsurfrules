# TherapyTrain Project Rules and Guidelines

## Project Overview
TherapyTrain is a secure, HIPAA-compliant therapy platform with real-time chat, AI assistance, and analytics capabilities.

## Development Guidelines

### Code Style and Structure
- Use TypeScript for all new code
- Follow functional programming patterns
- Use React Server Components (RSC) by default
- Implement proper error handling and logging
- Follow HIPAA compliance requirements

### Architecture Principles
- Prefer Server-Sent Events (SSE) over WebSocket for real-time features
- Use Supabase for database and real-time functionality
- Implement zero-knowledge encryption for sensitive data
- Follow the principle of least privilege

### Testing Requirements
- Write unit tests for all new features
- Include integration tests for critical paths
- Add end-to-end tests for user flows
- Test HIPAA compliance requirements

### Security Guidelines
- Implement proper authentication and authorization
- Use encryption for sensitive data
- Follow zero-knowledge principles
- Maintain audit trails

## Current Tasks

### 1. Update Mega-List
- [ ] Review current chat implementation
- [ ] Update SSE implementation details
- [ ] Add new security requirements
- [ ] Update testing guidelines

### 2. Chat System Implementation
- [ ] Complete SSE endpoint implementation
- [ ] Add message persistence
- [ ] Implement real-time features
- [ ] Add chat analytics

### 3. DevOps Setup
- [ ] Set up CI/CD pipeline
- [ ] Implement monitoring
- [ ] Add automated testing
- [ ] Configure deployment automation

### 4. AI Features
- [ ] Implement crisis prediction
- [ ] Complete sentiment analysis
- [ ] Add therapy technique recognition
- [ ] Add session quality scoring

## Lessons Learned

### Best Practices
- Use appropriate caching strategies
- Implement proper monitoring from start
- Follow progressive enhancement principles
- Consider both vertical and horizontal scaling

### Recent Fixes
- Fixed PostgreSQL statistics views
- Improved research workflow
- Enhanced type safety in authentication flow
- Added proper error handling

## Scratchpad

### Current Task: Project Setup and Documentation
[ ] Create initial .windsurfrules file
[ ] Update mega-list.mdx with SSE implementation
[ ] Plan chat system completion
[ ] Set up DevOps infrastructure
[ ] Begin AI feature implementation

### Notes
- Focus on completing core functionality first
- Maintain security and compliance throughout
- Document all architectural decisions
- Keep performance in mind from the start

# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `scratchpad.md` file so you will not make the same mistake again. 

You should also use the `scratchpad.md` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2
Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?"
```

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

## User Specified Lessons

- You have a python venv in ./venv.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Use LLM to perform flexible text understanding tasks. First test on a few files. After success, make it parallel.