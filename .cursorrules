# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

# Scratchpad

## Current Task: Vercel Deployment Preparation

### Plan:

[X] Fix PostCSS and Tailwind configuration
[X] Update dependencies to latest compatible versions
[X] Configure build process for Vercel
[X] Set up environment variables
[ ] Set up proper error handling and logging
[ ] Configure proper caching strategies
[ ] Set up monitoring and analytics
[ ] Implement proper security headers
[ ] Configure proper routing
[ ] Set up proper CI/CD pipeline
[ ] Configure proper backup and restore procedures
[ ] Set up proper staging environment
[ ] Implement proper rollback procedures

### Current Progress:

1. Completed Components:
   - Fixed PostCSS configuration to use ES modules
   - Updated Tailwind CSS to use proper plugin (@tailwindcss/postcss)
   - Configured build process in vercel.json
   - Set up proper caching headers for static assets
   - Added proper routing configuration for SPA
   - Environment variables configured in vercel.json

2. Next Steps:
   - Set up proper error handling and logging
   - Configure monitoring and analytics
   - Implement security headers
   - Set up CI/CD pipeline

### Implementation Order:

1. First milestone: Build Configuration ✓
   - Fixed PostCSS and Tailwind setup ✓
   - Updated dependencies ✓
   - Configured Vercel build process ✓

2. Second milestone: Environment and Security
   - Set up error handling and logging
   - Configure monitoring
   - Implement security headers
   - Set up proper CORS policies

3. Third milestone: CI/CD and Deployment
   - Configure CI/CD pipeline
   - Set up staging environment
   - Implement rollback procedures
   - Configure backup strategy

4. Fourth milestone: Performance and Monitoring
   - Set up performance monitoring
   - Configure error tracking
   - Implement uptime monitoring
   - Set up alerting system

### Notes:

- Ensure all environment variables are properly documented
- Follow security best practices
- Implement proper error boundaries
- Set up proper logging
- Configure proper monitoring
- Follow deployment best practices
- Implement proper backup procedures
- Set up proper staging environment
- Configure proper rollback procedures
- Monitor performance metrics
- Track error rates
- Set up proper alerting
- Configure proper caching
- Optimize build process
- Implement proper security measures

### Lessons Learned:

- Always include comprehensive error handling
- Implement proper audit logging for security events
- Use strong cryptographic functions for sensitive data
- Implement rate limiting and monitoring
- Add proper cleanup mechanisms for sensitive data
- Include automated testing for security features
- Use worker pools for computationally intensive operations
- Implement automatic key rotation for better security
- Add comprehensive input validation
- Use TypeScript for better type safety
- Implement log rotation for audit trails
- Add detailed operation tracking for debugging
- Include success rates and failure analysis in reports
- Support filtering and date ranges for audit history
- Maintain event chain integrity for audit logs
- Implement proper retention policies for compliance
- Add high-risk event detection and alerting
- Support automated archiving for old records
- Implement secure deletion procedures
- Track data lifecycle status
- Enforce retention periods based on data type
- Calculate weighted compliance scores
- Track and alert on high-risk violations
- Generate actionable recommendations
- Implement comprehensive BAA tracking
- Add proper document versioning
- Support electronic signatures
- Track security requirement verifications
- Handle BAA termination gracefully
- Maintain complete audit trail for BAAs
- When using Tailwind CSS 4.x, use `@tailwindcss/postcss` package instead of direct `tailwindcss` plugin in PostCSS config
- PostCSS configuration should use ES module syntax with explicit imports when `type: "module"` is set in package.json
- For PostCSS plugins, prefer using imported plugin functions directly in the plugins array instead of object configuration
- Use `.filter(Boolean)` to clean up null values in PostCSS plugins array for conditional plugins
- Configure proper caching headers for static assets in vercel.json
- Set up proper routing for SPA in vercel.json
- Document all environment variables in both .env.example and vercel.json
