# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

## Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

- Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

- LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```bash
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```bash
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```bash
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```bash
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

## Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When configuring TypeScript with Vitest, ensure proper types setup in tsconfig.json
- For form components, prefer simple HTML elements over complex UI libraries when facing type issues
- Keep test files organized with clear test suites and descriptive test cases
- Use wrapper components in tests to provide necessary context (e.g., form context)

## Scratchpad

### Current Task: Project Progress Update

#### Completed Phases

1. UI/UX Core Features:
   [X] Dark Mode Implementation
   - [X] Theme system with context provider
   - [X] Component theming with variants
   - [X] Theme persistence and sync
   - [X] Theme animations and transitions
   - [X] High contrast support
   - [X] Testing & documentation

2. Accessibility Implementation:
   [X] Core Infrastructure
   - [X] Accessibility context provider
   - [X] Keyboard navigation system
   - [X] Focus trap management
   - [X] Screen reader announcements

   [X] Component Accessibility
   - [X] Focus management
   - [X] ARIA attributes
   - [X] Keyboard shortcuts
   - [X] High contrast mode
   - [X] Reduced motion support

3. Authentication System:
   [X] Core Features
   - [X] Password management
   - [X] Security features
   - [X] Email integration
   - [X] Testing coverage

4. Email System Implementation:
   [X] Template Management
   - [X] Base email template
   - [X] Accessibility improvements
   - [X] Template inheritance
   - [X] Dark mode support
   - [X] Template preview

   [X] Email Infrastructure
   - [X] Resend provider setup
   - [X] Error handling
   - [X] Email validation
   - [X] Analytics tracking
   - [X] Testing utilities

   [X] Email Analytics Dashboard
   - [X] Delivery tracking UI
   - [X] Bounce rate monitoring
   - [X] Analytics visualizations
   - [X] A/B testing system

5. HIPAA Compliance Implementation:
   [X] Core Infrastructure
   - [X] Database schema setup
   - [X] Real-time monitoring service
   - [X] Event handling system
   - [X] Violation detection
   - [X] Alert management

   [X] Monitoring Dashboard
   - [X] Metrics visualization
   - [X] Active incidents display
   - [X] Real-time updates
   - [X] Alert management

   [X] Testing Coverage
   - [X] Unit tests for monitoring service
   - [X] Integration tests
   - [X] API endpoint tests
   - [X] Dashboard component tests

#### Current Progress

1. Documentation (In Progress):
   [ ] API Documentation
   - [ ] Monitoring endpoints
   - [ ] Event types and schemas
   - [ ] Integration guides
   - [ ] Security requirements

   [ ] User Documentation
   - [ ] Dashboard usage guide
   - [ ] Alert management
   - [ ] Compliance reporting
   - [ ] Best practices

2. Advanced Features (Next Up):
   [ ] Automated Remediation
   - [ ] Workflow automation
   - [ ] Incident response
   - [ ] Recovery procedures
   - [ ] Audit trails

   [ ] Advanced Analytics
   - [ ] Compliance reporting
   - [ ] Trend analysis
   - [ ] Risk assessment
   - [ ] Predictive analytics

#### Next Steps (Prioritized)

1. Complete Documentation
   - API documentation
   - User guides
   - Integration guides
   - Security documentation

2. Implement Advanced Features
   - Automated remediation
   - Advanced analytics
   - Compliance reporting
   - Risk assessment

3. Start Advanced Security Features
   - Quantum-resistant encryption
   - Homomorphic encryption
   - Secure multi-party computation
   - Zero-knowledge proofs

### Notes

- HIPAA monitoring system core features complete
- Moving to documentation and advanced features
- Maintaining focus on security and compliance
- Planning advanced analytics implementation

### Lessons Learned

1. HIPAA Compliance:
   - Real-time monitoring patterns
   - Violation detection strategies
   - Alert management system
   - Testing methodologies

2. Security:
   - Event handling patterns
   - Audit logging
   - Incident response
   - Access control

3. Dashboard Design:
   - Real-time updates
   - Metrics visualization
   - Alert management
   - User experience
