# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When configuring TypeScript with Vitest, ensure proper types setup in tsconfig.json
- For form components, prefer simple HTML elements over complex UI libraries when facing type issues
- Keep test files organized with clear test suites and descriptive test cases
- Use wrapper components in tests to provide necessary context (e.g., form context)

# Scratchpad

## Current Task: PocketBase UI/UX Pattern Integration (March 2024)

### Progress Update
1. Dashboard Features Study:
   [ ] Admin Interface
   - [ ] Study PocketBase dashboard layout
   - [ ] Map UI components to our system
   - [ ] Design responsive layouts
   - [ ] Plan component hierarchy

2. Role-Based Access Patterns:
   [ ] Access Control Implementation
   - [ ] Study PocketBase RBAC patterns
   - [ ] Design equivalent Supabase RLS policies
   - [ ] Plan permission management UI
   - [ ] Design role assignment flow

3. Routing and Navigation:
   [ ] Route Structure
   - [ ] Analyze PocketBase route organization
   - [ ] Design equivalent Next.js routes
   - [ ] Plan protected routes
   - [ ] Design route transitions

### Implementation Plan
1. UI/UX Features:
   - Study PocketBase dashboard components
   - Design equivalent components using our stack
   - Maintain Supabase integration
   - Implement responsive layouts

2. Access Control:
   - Map PocketBase roles to Supabase RLS
   - Design permission management
   - Implement role-based UI
   - Create admin interfaces

### Next Actions:
1. Begin Dashboard Implementation
   - Review PocketBase dashboard code
   - Design component structure
   - Create layout components
   - Implement navigation

2. Documentation
   - Document UI patterns
   - Create component guide
   - Document access control
   - Add implementation examples

### Notes:
- Keep Supabase as core auth system
- Use PocketBase only as reference for UI/UX
- Focus on dashboard patterns
- Maintain existing security model
- Consider scalability in design

### Lessons Learned:
1. UI/UX Patterns:
   - Study successful implementations
   - Adapt patterns to existing stack
   - Maintain consistent design
   - Consider user experience
   - Keep security in mind

2. System Design:
   - Separate concerns clearly
   - Document design decisions
   - Plan for maintainability
   - Consider future extensions
   - Keep core systems intact

### Next Steps:
1. Study PocketBase dashboard structure:
   ```typescript
   // Example dashboard layout
   interface DashboardLayout {
     navigation: NavigationComponent;
     header: HeaderComponent;
     sidebar: SidebarComponent;
     content: ContentArea;
     footer: FooterComponent;
   }
   ```

2. Map to our components:
   ```typescript
   // Our equivalent structure
   interface AdminDashboard {
     nav: {
       main: MainNavigation;
       breadcrumbs: Breadcrumbs;
       actions: ActionBar;
     };
     layout: {
       header: DashboardHeader;
       sidebar: AdminSidebar;
       content: MainContent;
     };
     auth: {
       // Keep existing Supabase auth
       session: SupabaseSession;
       user: SupabaseUser;
     };
   }
   ```

3. Plan implementation:
   - Create dashboard wireframes
   - Design component hierarchy
   - Plan routing structure
   - Design permission system

## Current Task: Form Component Testing (March 2024)

### Progress Update
1. FormSelect Component Tests:
   [X] Basic rendering tests
   [X] Value change handling
   [X] Error state display
   [X] Accessibility attributes
   [X] Required field handling
   [X] Custom styling support
   [X] Placeholder functionality
   [X] Keyboard navigation
   [X] Focus management
   [X] Screen reader compatibility

2. FormInput Component Tests:
   [X] Basic rendering and functionality
   [X] Form validation
   [X] User input handling
   [X] Keyboard navigation
   [X] Accessibility support
   [X] Form submission
   [X] Custom styling
   [X] Error states

3. FormTextarea Component Tests:
   [X] Basic rendering and functionality
   [X] Form validation
   [X] User input handling
   [X] Keyboard navigation
   [X] Accessibility support
   [X] Form submission
   [X] Custom styling
   [X] Error states
   [X] Character count functionality
   [X] Resize behavior
   [X] Multiline input handling
   [X] Rows attribute support

4. Next Components to Test:
   [ ] FormRadioGroup
   [ ] FormCheckbox
   [ ] FormField

### Test Coverage Goals:
1. Functional Testing:
   - Component rendering
   - User interactions
   - Value changes
   - Error states
   - Validation

2. Accessibility Testing:
   - ARIA attributes
   - Keyboard navigation
   - Screen reader support
   - Focus management

3. Edge Cases:
   - Empty states
   - Loading states
   - Error handling
   - Boundary conditions

### Next Actions:
1. Move to FormRadioGroup component
   - Review component implementation
   - Plan test cases
   - Implement tests
   - Verify coverage

2. Documentation
   - Document test patterns
   - Add test examples
   - Document accessibility testing
   - Add validation testing guide

### Notes:
- Using @testing-library/react for DOM testing
- Using vitest for test runner
- Following accessibility best practices
- Maintaining consistent test patterns
- Completed FormSelect, FormInput, and FormTextarea tests with full coverage

### Lessons Learned:
1. Testing Patterns:
   - Use userEvent for keyboard interaction testing
   - Test focus management thoroughly
   - Verify ARIA attributes for accessibility
   - Test all keyboard navigation paths
   - Ensure proper screen reader support
   - Test form validation comprehensively
   - Include form submission tests
   - Test error state handling
   - Test component-specific features (e.g., character count, resize)
   - Verify multiline input handling

2. Component Design:
   - Implement proper keyboard navigation
   - Maintain focus management
   - Support ARIA attributes
   - Handle all interaction states
   - Consider accessibility from the start
   - Use proper form validation
   - Handle error states gracefully
   - Support component-specific features
   - Maintain consistent behavior across form components

## Current Task: Systematic TypeScript Refactoring (March 2024)

### Progress Update (March 2024)
1. Completed UI Component Integration:
   [X] Chat Interface Components
   - Chat container with message bubbles
   - Typing indicators
   - Message status indicators
   - Emoji support
   - Auto-scrolling

   [X] Navigation Components
   - Sidebar with sections and icons
   - Header with actions
   - Breadcrumb navigation
   - Mobile-responsive menu

   [X] Form Components
   - FormField base component
   - Input with validation
   - Textarea with character count
   - Select dropdown
   - Checkbox toggle
   - Radio group with descriptions

2. Component Tests:
   [X] Chat Component Tests
   - TypingIndicator tests
   - MessageBubble tests
   - ChatInput tests
   - ChatContainer tests

   [X] Navigation Component Tests
   - Breadcrumb tests
   - Header tests
   - Sidebar tests
   - MobileMenu tests

   [ ] Form Component Tests
   - FormField tests
   - Input tests
   - Textarea tests
   - Select tests
   - Checkbox tests
   - Radio tests

3. Next Steps:
   [ ] Complete Form Component Tests
   - Write test cases
   - Add accessibility tests
   - Add validation tests
   - Add error handling tests

   [ ] Start PocketBase Integration
   - Study PocketBase architecture
   - Plan data model adaptation
   - Design authentication flow
   - Map out API endpoints

   [ ] Documentation
   - Component usage examples
   - API documentation
   - Migration guides
   - Best practices

### Lessons Learned
1. Component Architecture:
   - Use base components for consistent styling
   - Implement proper TypeScript generics
   - Handle all edge cases in validation
   - Add proper accessibility attributes

2. Testing Strategy:
   - Mock external dependencies (next/navigation)
   - Test responsive behavior
   - Verify accessibility attributes
   - Test user interactions thoroughly
   - Include edge cases in test coverage

3. Navigation Design:
   - Consider mobile-first approach
   - Implement proper keyboard navigation
   - Handle deep linking properly
   - Maintain consistent animations

### Next Actions
1. Create test suite for form components
2. Begin PocketBase integration planning
3. Document component usage
4. Review and optimize bundle size

## Current Task: CI/CD Pipeline Compliance

### Required Checks from CI/CD Configuration:
1. Frontend (Node.js):
   - Type checking (pnpm run type-check)
   - ESLint (pnpm run lint)
   - Unit tests (pnpm run test:ci)
   - Build verification

2. Backend (Python):
   - Python 3.10 compatibility
   - Unit tests
   - Environment configuration
   - Playwright browser tests

### Action Plan:
[ ] Frontend Checks
  [ ] Run and fix type checking issues
  [ ] Run and fix ESLint violations
  [ ] Run and fix unit tests
  [ ] Verify build process

[ ] Backend Checks
  [ ] Verify Python 3.10 compatibility
  [ ] Run and fix unit tests
  [ ] Verify environment configuration
  [ ] Run Playwright tests

[ ] Deployment Checks
  [ ] Verify Vercel configuration
  [ ] Test staging deployment process
  [ ] Validate production deployment setup

### Progress Tracking:
Current Status: Starting frontend checks
Next Step: Run type checking

## Current Task: Fix TypeScript Errors (March 2024)

### Error Analysis:
1. Module Resolution Issues (Most Critical):
   - Missing module declarations for core modules:
     - @/database.types
     - @/common
     - @/user
     - @/auth
     - @/chat
     - @/metrics
     - @/session
     - @/hipaa
     - @/security

2. Type Definition Issues:
   - Duplicate type declarations:
     - Database (3 occurrences)
     - ClientProfile (2 occurrences)
   - Incorrect type imports:
     - Database import from @supabase/supabase-js
     - SupabaseClientOptions type
     - RealtimeClientOptions type

3. Unused Import Issues:
   - Unused imports in:
     - src/types/common.ts
     - src/types/security.ts
     - src/types/services.ts
     - src/utils/auth.ts
     - src/components/ui/*

4. Event Handler Type Issues:
   - Unknown type errors in event handlers:
     - src/pages/Auth.tsx
     - src/pages/Chat.tsx
     - src/utils/eventUtils.ts

### Action Plan:
1. Module Resolution:
   [ ] Create missing module declaration files
   [ ] Update tsconfig.json paths
   [ ] Fix import paths
   [ ] Add proper type exports

2. Type Definitions:
   [ ] Consolidate duplicate types
   [ ] Fix incorrect type imports
   [ ] Update type declarations
   [ ] Fix type conflicts

3. Import Cleanup:
   [ ] Remove unused imports
   [ ] Fix circular dependencies
   [ ] Update import statements
   [ ] Add missing type imports

4. Event Handlers:
   [ ] Add proper type declarations
   [ ] Fix unknown type assertions
   [ ] Update event handler signatures
   [ ] Add type guards

### Progress:
[X] Initial error analysis
[X] Created systematic plan
[ ] Fixed module resolution issues
[ ] Fixed type definition issues
[ ] Fixed import issues
[ ] Fixed event handler issues

### Next Steps:
1. First, let's check the tsconfig.json to ensure proper module resolution setup:
   ```typescript
   {
     "compilerOptions": {
       "paths": {
         "@/*": ["./src/*"],
         "@/types/*": ["./src/types/*"],
         "@/components/*": ["./src/components/*"]
       }
     }
   }
   ```

2. Then create the missing module declaration files:
   ```typescript
   // src/types/database.types.ts
   export interface Database {
     // Add database schema types
   }

   // src/types/common.ts
   export interface Metadata {
     // Add metadata types
   }

   // And so on for other missing modules...
   ```

### Notes:
- Many errors stem from missing module declarations
- Need to ensure consistent type exports across the application
- Should consider creating a central types directory for better organization
- Need to handle circular dependencies carefully
- Consider using barrel exports for related types

### Lessons Learned:
- Always create proper module declarations
- Use consistent type naming across the application
- Keep type definitions organized in proper modules
- Clean up unused imports regularly
- Use proper type guards for unknown types
- Handle circular dependencies carefully

## Current Task: Fix TypeScript Errors in Backend

### Error Analysis from Latest Type Check:
1. Express Type Issues:
   - [ ] Fix Request/Response type issues in app.ts
   - [ ] Add proper type definitions for Express middleware
   - [ ] Fix WebSocket type conflicts

2. Security Service Issues:
   - [ ] Fix SecurityIncident type missing 'resolved' property
   - [ ] Fix IncidentType string literal type issues
   - [ ] Add proper type exports for security config

3. Authentication Issues:
   - [ ] Add @simplewebauthn/server type declarations
   - [ ] Fix WebAuthn service type issues
   - [ ] Fix session type declarations

4. BAA Management Issues:
   - [ ] Export enum types from BAAManagementService
   - [ ] Fix HIPAAAuditEvent timestamp property
   - [ ] Fix audit service type conflicts

### Current Focus:
Working on Express type issues in app.ts, specifically:
1. Adding proper type declarations for Request/Response objects
2. Fixing property access on 'unknown' types
3. Adding proper type guards for request body validation

### Next Steps:
1. Fix Express type issues:
   ```typescript
   import { Request, Response } from 'express';
   
   interface TypedRequestBody<T> extends Request {
     body: T;
   }
   ```

2. Add security incident type fixes:
   ```typescript
   export interface SecurityIncident {
     type: IncidentType;
     severity: string;
     timestamp: Date;
     sourceIp: string;
     userId?: string;
     details: Record<string, unknown>;
     resolved: boolean;
   }
   ```

3. Install missing type declarations:
   ```bash
   pnpm add -D @types/simplewebauthn__server @types/express-session
   ```

### Progress:
[X] Identified all TypeScript errors from type-check
[X] Categorized errors by component/service
[X] Fixed Express type issues
[ ] Fixed Security Service types
[ ] Fixed Authentication types
[ ] Fixed BAA Management types

### Lessons Learned:
- Need to properly type Express request/response objects
- Always include required properties in interface definitions
- Export enum types when they're used across modules
- Use proper type guards for unknown types
- Install type declarations for external packages

## Current Task: Fix TypeScript type issues using ts:fix script

### Current Status:
Found existing fix-types.ts script with the following functionality:
- [X] Path alias fixes
- [X] Component prop types fixes
- [X] Unknown type fixes
- [X] Array callback fixes
- [X] Missing type declarations
- [X] React component type fixes
- [X] Event handler type fixes
- [X] Common TypeScript issue fixes

### Next Steps:
[ ] Add additional type fixes:
  - [ ] Add Supabase client type fixes
  - [ ] Add Express middleware type fixes
  - [ ] Add WebAuthn type fixes
  - [ ] Add BAA Management type fixes

[ ] Improve error reporting:
  - [ ] Add detailed error messages
  - [ ] Add line numbers to error reports
  - [ ] Add suggestions for manual fixes

[ ] Add type validation:
  - [ ] Validate fixed types against schema
  - [ ] Check for circular dependencies
  - [ ] Verify import/export consistency

[ ] Add testing:
  - [ ] Add unit tests for each fix function
  - [ ] Add integration tests
  - [ ] Add snapshot tests for before/after fixes

### Implementation Plan:
1. First, let's add the new type fixes:
   ```typescript
   // Supabase client type fixes
   function fixSupabaseTypes() {
     // Add type fixes for Supabase client
     // Fix session and user types
     // Add proper error handling
   }

   // Express middleware type fixes
   function fixExpressTypes() {
     // Add Request/Response type fixes
     // Add middleware type definitions
     // Fix route handler types
   }

   // WebAuthn type fixes
   function fixWebAuthnTypes() {
     // Add @simplewebauthn/server types
     // Fix authentication flow types
     // Add proper error handling
   }

   // BAA Management type fixes
   function fixBAATypes() {
     // Add enum type exports
     // Fix timestamp property types
     // Add proper audit event types
   }
   ```

2. Then improve error reporting:
   ```typescript
   interface TypeFixError {
     file: string;
     line: number;
     message: string;
     suggestion?: string;
   }

   function reportError(error: TypeFixError) {
     // Improved error reporting logic
   }
   ```

3. Add type validation:
   ```typescript
   function validateTypes() {
     // Type validation logic
     // Circular dependency checking
     // Import/export verification
   }
   ```

4. Add tests:
   ```typescript
   describe('Type Fixes', () => {
     // Test cases for each fix function
     // Integration tests
     // Snapshot tests
   })
   ```

### Progress:
[X] Analyzed existing script
[X] Identified missing functionality
[X] Created implementation plan
[X] Implemented Supabase client type fixes
  [X] Added import fixes
  [X] Added client instance type fixes
  [X] Added auth type fixes
  [X] Added database type fixes
[X] Implemented Express middleware type fixes
  [X] Added import fixes for Request, Response, NextFunction
  [X] Added middleware function type fixes
  [X] Added error handler type fixes
  [X] Added route handler type fixes
  [X] Added router declaration type fixes
[X] Implemented WebAuthn type fixes
  [X] Added server-side type imports
  [X] Added client-side type imports
  [X] Fixed WebAuthn service method types
  [X] Fixed WebAuthn request/response types
[X] Implemented BAA Management type fixes
  [X] Added enum exports
  [X] Added interface exports
  [X] Fixed timestamp property types
  [X] Fixed metadata types
  [X] Fixed service method types
[X] Added improved error reporting
  [X] Added error interfaces and types
  [X] Added error collection and reporting
  [X] Added per-file result tracking
  [X] Added detailed error messages
  [X] Added error suggestions
[X] Added type validation
  [X] Added validation interfaces and types
  [X] Added type error checking
  [X] Added circular dependency detection
  [X] Added unused export detection
  [X] Added type assertion warnings
[X] Added tests
  [X] Added test setup with temporary files
  [X] Added path alias fix tests
  [X] Added component prop type fix tests
  [X] Added unknown type fix tests
  [X] Added array callback fix tests
  [X] Added Express type fix tests
  [X] Added WebAuthn type fix tests
  [X] Added BAA Management type fix tests
  [X] Added type validation tests

### Next Action:
All planned tasks have been completed. The script is ready for use.

### Notes:
- Successfully added comprehensive test suite that covers:
  - All type fix functions
  - Type validation functionality
  - Error reporting system
  - Edge cases and error conditions
  - Temporary file handling
- Test suite uses isolated environment for each test
- Tests are descriptive and maintainable
- Consider adding:
  - Performance tests for large codebases
  - Integration tests with actual project files
  - Snapshot tests for complex fixes
  - More edge cases and error conditions

### Final Implementation Summary:
1. Type Fixes:
   - Path alias resolution
   - Component prop types
   - Unknown type handling
   - Array callback types
   - Express middleware types
   - WebAuthn service types
   - BAA Management types

2. Error Reporting:
   - Structured error types
   - Detailed error messages
   - File-specific tracking
   - Error suggestions
   - Summary statistics

3. Type Validation:
   - Type error detection
   - Circular dependency checks
   - Unused export detection
   - Type assertion warnings
   - Comprehensive reporting

4. Test Coverage:
   - Unit tests for all fixes
   - Validation tests
   - Error reporting tests
   - Edge case handling
   - Clean test environment

The script is now ready to help maintain type safety across the codebase.

## Analysis

### Current Setup

- Script: tsx scripts/fix-types.ts
- Dependencies:
  - TypeScript: ^5.7.3
  - TSX: ^4.19.2

## Plan

- [X] Check if scripts/fix-types.ts exists
- [ ] Create fix-types.ts script if missing
- [ ] Implement type fixing logic
- [ ] Test the implementation

## Current Task: PocketBase Authentication Integration (March 2024)

### Progress Update
1. Authentication System Planning:
   [ ] User Management
   - [ ] Review Supabase auth flow
   - [ ] Map PocketBase auth to Supabase
   - [ ] Design role-based access control
   - [ ] Plan user profile structure
   - [ ] Design session handling

2. Security Integration:
   [ ] Core Security Features
   - [ ] Review existing ZK system
   - [ ] Plan rate limiting implementation
   - [ ] Design request validation
   - [ ] Plan security audit logging

### Implementation Plan
1. User Management:
   - Study PocketBase auth architecture
   - Map auth flows to Supabase
   - Design role system
   - Plan migration path

2. Security Features:
   - Review ZK requirements
   - Design rate limiting
   - Plan validation rules
   - Design audit system

### Next Actions:
1. Begin User Management Implementation
   - Review PocketBase auth docs
   - Study Supabase auth system
   - Map authentication flows
   - Design role system

2. Documentation
   - Document auth flow
   - Create migration guide
   - Document security features
   - Add implementation guide

### Notes:
- Need to maintain Zero-Knowledge system compatibility
- Focus on security best practices
- Consider rate limiting requirements
- Plan for audit logging
- Design for scalability

### Lessons Learned:
1. Authentication Patterns:
   - Maintain secure auth flows
   - Implement proper role management
   - Handle session securely
   - Consider rate limiting
   - Log security events

2. System Design:
   - Keep security first
   - Plan for scalability
   - Document thoroughly
   - Consider migration paths
   - Maintain existing security

### Next Steps:
1. First, let's review PocketBase's authentication architecture:
   ```typescript
   // Core authentication types
   interface AuthSystem {
     users: UserManagement;
     roles: RoleManagement;
     sessions: SessionHandling;
     security: SecurityFeatures;
   }

   interface UserManagement {
     create: (data: UserData) => Promise<User>;
     authenticate: (credentials: Credentials) => Promise<Session>;
     validateToken: (token: string) => Promise<User>;
     refreshToken: (token: string) => Promise<Session>;
   }
   ```

2. Then map to Supabase's system:
   ```typescript
   // Supabase auth mapping
   interface SupabaseAuth {
     auth: {
       signUp: (credentials: SignUpCredentials) => Promise<User>;
       signIn: (credentials: SignInCredentials) => Promise<Session>;
       verifyToken: (token: string) => Promise<User>;
       refreshSession: () => Promise<Session>;
     };
   }
   ```

3. Plan the integration:
   - Create auth flow diagrams
   - Document security requirements
   - Design migration scripts
   - Plan rollout strategy
