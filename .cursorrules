# Instructions

You are a multi-agent system coordinator, playing two roles in this environment: Planner and Executor. You will decide the next steps based on the current state of `Multi-Agent Scratchpad` section in the `.cursorrules` file. Your goal is to complete the user's (or business's) final requirements. The specific instructions are as follows:

## Role Descriptions

1. Planner

    * Responsibilities: Perform high-level analysis, break down tasks, define success criteria, evaluate current progress. When doing planning, always use high-intelligence models (OpenAI o1 via `tools/plan_exec_llm.py`). Don't rely on your own capabilities to do the planning.
    * Actions: Invoke the Planner by calling `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt}`. You can also include content from a specific file in the analysis by using the `--file` option: `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt} --file {path/to/file}`. It will print out a plan on how to revise the `.cursorrules` file. You then need to actually do the changes to the file. And then reread the file to see what's the next step.

2. Executor

    * Responsibilities: Execute specific tasks instructed by the Planner, such as writing code, running tests, handling implementation details, etc.. The key is you need to report progress or raise questions to the Planner at the right time, e.g. after completion some milestone or after you've hit a blocker.
    * Actions: When you complete a subtask or need assistance/more information, also make incremental writes or modifications to the `Multi-Agent Scratchpad` section in the `.cursorrules` file; update the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections. And then change to the Planner role.

## Document Conventions

* The `Multi-Agent Scratchpad` section in the `.cursorrules` file is divided into several sections as per the above structure. Please do not arbitrarily change the titles to avoid affecting subsequent reading.
* Sections like "Background and Motivation" and "Key Challenges and Analysis" are generally established by the Planner initially and gradually appended during task progress.
* "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" are mainly filled by the Executor, with the Planner reviewing and supplementing as needed.
* "Next Steps and Action Items" mainly contains specific execution steps written by the Planner for the Executor.

## Workflow Guidelines

* After you receive an initial prompt for a new task, update the "Background and Motivation" section, and then invoke the Planner to do the planning.
* When thinking as a Planner, always use the local command line `python tools/plan_exec_llm.py --prompt {any prompt}` to call the o1 model for deep analysis, recording results in sections like "Key Challenges and Analysis" or "High-level Task Breakdown". Also update the "Background and Motivation" section.
* When you as an Executor receive new instructions, use the existing cursor tools and workflow to execute those tasks. After completion, write back to the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections in the `Multi-Agent Scratchpad`.
* If unclear whether Planner or Executor is speaking, declare your current role in the output prompt.
* Continue the cycle unless the Planner explicitly indicates the entire project is complete or stopped. Communication between Planner and Executor is conducted through writing to or modifying the `Multi-Agent Scratchpad` section.

Please note:

* Note the task completion should only be announced by the Planner, not the Executor. If the Executor thinks the task is done, it should ask the Planner for confirmation. Then the Planner needs to do some cross-checking.
* Avoid rewriting the entire document unless necessary;
* Avoid deleting records left by other roles; you can append new paragraphs or mark old paragraphs as outdated;
* When new external information is needed, you can use command line tools (like search_engine.py, llm_api.py), but document the purpose and results of such requests;
* Before executing any large-scale changes or critical functionality, the Executor should first notify the Planner in "Executor's Feedback or Assistance Requests" to ensure everyone understands the consequences.
* During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

## Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

IMPORTANT: Make better use of the available Python tools! Before diving into implementation, always try to:

1. Use search_engine.py to research solutions and best practices
2. Use web_scraper.py to gather detailed documentation
3. Use llm_api.py for complex analysis tasks
4. Combine tools for a better research workflow

Remember: These tools are here to help make better informed decisions. Use them proactively!

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

* Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

* LLM Verification with Images:

'''bash
python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
'''

Example workflow:

'''python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

## Take a screenshot

screenshot_path = take_screenshot_sync('<https://example.com>', 'screenshot.png')

## Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
'''

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

'''bash
python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
'''

The LLM API supports multiple providers:

* OpenAI (default, model: gpt-4o)
* Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
* DeepSeek (model: deepseek-chat)
* Anthropic (model: claude-3-sonnet-20240229)
* Gemini (model: gemini-pro)
* Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

'''bash
python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
'''

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

'''bash
python ./tools/search_engine.py "your search keywords"
'''

This will output the search results in the following format:

'''bash
URL: <https://example.com>
Title: This is the title of the search result
Snippet: This is a snippet of the search result
'''

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

## Lessons

### Core Lessons

- Use proper TypeScript types and interfaces for better type safety
- When adapting authentication systems, ensure proper session and user type compatibility
- Keep audit events consistent with the system's event types
- Handle rate limiting and security at the adapter level
- Implement proper error handling and audit logging
- Follow HIPAA compliance requirements for authentication and audit trails
- Make better use of available Python tools for research and automation:
  - Use search_engine.py for initial research on libraries and best practices
  - Use web_scraper.py for gathering detailed documentation
  - Use llm_api.py for analyzing complex technical decisions
  - Combine tools for a more thorough research workflow

### Recent Fixes

- Fixed PocketBase adapter type issues:
  - Moved PocketBase-specific interfaces to the adapter file
  - Updated audit event types to match system requirements
  - Fixed session user initialization
  - Improved type safety in authentication flow
  - Added proper error handling and audit logging

- Improved research workflow:
  - Started using search_engine.py more consistently
  - Combined search results with web_scraper.py for deeper analysis
  - Better utilization of Python toolkit for research tasks

- Fixed PostgreSQL statistics views and column names:
  - Use pg_stat_user_tables for table statistics (n_live_tup, n_dead_tup, etc.)
  - Use pg_statio_user_tables for I/O statistics (heap_blks_hit, heap_blks_read)
  - Use pg_stat_user_indexes for index statistics (idx_scan, idx_tup_fetch)
  - Use pg_statio_user_indexes for index I/O statistics (idx_blks_hit, idx_blks_read)
  - Use pg_class for table metadata (relname, reltuples, relpages, reloptions)
  - Join on pg_class.oid = pg_stat_user_tables.relid for correct table matching

- Fixed Redis mock implementation and tests:
  - Added simulated latency for consistent testing
  - Improved metrics tracking and recommendations
  - Fixed memory management and event emission
  - Removed long timeouts from tests
  - Made tests more deterministic and reliable
  - Added proper type safety and error handling
  - Improved test coverage for all Redis operations

### Best Practices

- Use appropriate caching strategies for different data types
- Implement proper monitoring from the start
- Follow progressive enhancement principles
- Consider both vertical and horizontal scaling
- Use correct PostgreSQL system catalog views and column names for statistics gathering
- Properly handle table and index statistics for performance monitoring
- Use appropriate joins between system catalog tables for accurate metadata

## Scratchpad

### Current Task: Redis Service Implementation and Testing

Progress:
[X] Redis Mock Implementation
  [X] Basic operations (set, get, del)
  [X] Pattern-based operations
  [X] TTL support
  [X] Memory management
  [X] Event emission

[X] Redis Service Testing
  [X] Basic operations tests
  [X] Pattern-based operation tests
  [X] Performance monitoring tests
  [X] Memory management tests
  [X] Integration tests with MonitoringService

[X] Metrics and Monitoring
  [X] Hit/miss tracking
  [X] Latency tracking
  [X] Performance recommendations
  [X] Metrics history

[ ] Next Steps: Blog Content Planning and Development
  [X] Initial Setup
    [X] Created content calendar
    [X] Developed article template
    [X] Created series planning template
    [X] Set up blog structure

  [X] Current Series Documentation
    [X] Understanding Trauma Series
    [X] Healing Journey Series
    [X] Article metadata and structure
    [X] Series navigation

  [X] Upcoming Series Planning
    [X] Trauma and the Body Series
      [X] Series index page
      [X] First article template
      [X] Resource planning
      [X] Supporting materials
    [ ] Mindfulness in Recovery Series
      [ ] Detailed article outlines
      [ ] Author assignments
      [ ] Resource planning
      [ ] Supporting materials
    [ ] Attachment Patterns Series
      [ ] Detailed article outlines
      [ ] Author assignments
      [ ] Resource planning
      [ ] Supporting materials
    [ ] Boundaries and Recovery Series
      [ ] Detailed article outlines
      [ ] Author assignments
      [ ] Resource planning
      [ ] Supporting materials

  [ ] Content Development Support
    [X] Author guidelines
    [X] Style guide
    [X] Review checklist
    [ ] Resource templates

  [ ] Promotional Strategy
    [ ] Newsletter templates
    [ ] Social media plan
    [ ] Professional outreach
    [ ] Community engagement

### Next Steps:
1. Continue with Mindfulness in Recovery Series planning
2. Create resource templates for authors
3. Develop promotional strategy components
4. Set up newsletter and social media templates

### Best Practices:
- Maintain consistent voice and tone across series
- Ensure evidence-based content with citations
- Include practical applications and exercises
- Create engaging, accessible content
- Follow trauma-informed writing guidelines
- Maintain professional standards
- Use proper metadata and SEO practices
- Include interactive elements for engagement
- Provide downloadable resources
- Maintain clinical accuracy

### Recent Fixes:
- Created comprehensive email database schema
- Implemented email service with tracking
- Added template management system
- Created base email templates
- Fixed package manager configuration from yarn to pnpm
- Installed required dependencies (mjml, @types/mjml, resend, @upstash/redis)
- Fixed import paths in tsconfig.json
- Created logger implementation
- Added Redis cache configuration
- Added environment variable validation
- Updated services to use validated environment variables
- Created test suites for template rendering
- Added type declarations for test dependencies
- Created test suite for email sending
- Added proper mocking for external services

### Lessons Learned:
- Always validate environment variables using a schema
- Use proper TypeScript types for better type safety
- Handle Redis client types carefully
- Keep services properly configured with environment variables
- Use proper error handling in services
- Implement proper logging and monitoring
- Write tests before implementing features when possible
- Mock external dependencies in tests
- Add proper type declarations for dependencies
- Extract mock functions for better test maintainability
- Use proper typing for mock functions
