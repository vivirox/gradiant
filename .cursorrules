# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

# Scratchpad

## Current Task: CI/CD Pipeline Compliance

### Required Checks from CI/CD Configuration:
1. Frontend (Node.js):
   - Type checking (pnpm run type-check)
   - ESLint (pnpm run lint)
   - Unit tests (pnpm run test:ci)
   - Build verification

2. Backend (Python):
   - Python 3.10 compatibility
   - Unit tests
   - Environment configuration
   - Playwright browser tests

### Action Plan:
[ ] Frontend Checks
  [ ] Run and fix type checking issues
  [ ] Run and fix ESLint violations
  [ ] Run and fix unit tests
  [ ] Verify build process

[ ] Backend Checks
  [ ] Verify Python 3.10 compatibility
  [ ] Run and fix unit tests
  [ ] Verify environment configuration
  [ ] Run Playwright tests

[ ] Deployment Checks
  [ ] Verify Vercel configuration
  [ ] Test staging deployment process
  [ ] Validate production deployment setup

### Progress Tracking:
Current Status: Starting frontend checks
Next Step: Run type checking

## Current Task: Fix TypeScript Errors (March 2024)

### Error Analysis:
1. Import Path Issues:
   - [ ] Fix relative imports to use @/ prefix
   - [ ] Fix missing module declarations
   - [ ] Fix case-sensitive import conflicts

2. Interface Extension Issues:
   - [ ] Fix OTPProps extending BaseProps (onChange type mismatch)
   - [ ] Fix TooltipProps extending PositionProps (content type mismatch)
   - [ ] Fix CalendarProps extending BaseProps (onSelect type mismatch)
   - [ ] Fix SliderProps extending BaseProps (defaultValue type mismatch)

3. Missing Type Declarations:
   - [ ] Create types/ClientProfile.ts
   - [ ] Create types/supabase.ts
   - [ ] Create utils/eventUtils.ts
   - [ ] Create lib/supabaseClient.ts

4. Component Type Issues:
   - [ ] Fix Badge variant type issues
   - [ ] Fix Dialog component props
   - [ ] Fix Toast state and action types
   - [ ] Fix Auth component event handling

5. Service Type Issues:
   - [ ] Fix API service interceptor types
   - [ ] Fix Crisis Prediction service method types
   - [ ] Fix Intervention Metrics service method types
   - [ ] Fix Learning Path service method types

### Action Plan:
1. Fix Import Path Issues
   - [ ] Update tsconfig.json paths
   - [ ] Create missing type declaration files
   - [ ] Fix case sensitivity in imports

2. Fix Interface Extensions
   - [ ] Update base interfaces
   - [ ] Fix property type mismatches
   - [ ] Add proper type guards

3. Create Missing Type Files
   - [ ] Add ClientProfile types
   - [ ] Add Supabase types
   - [ ] Add Event utility types
   - [ ] Add Supabase client types

4. Fix Component Types
   - [ ] Update component prop types
   - [ ] Fix event handler types
   - [ ] Update state management types

5. Fix Service Types
   - [ ] Add proper method signatures
   - [ ] Fix return types
   - [ ] Add type guards for API responses

### Progress:
[X] Initial error analysis
[X] Created detailed plan
[ ] Fixed import path issues
[ ] Fixed interface extensions
[ ] Created missing type files
[ ] Fixed component types
[ ] Fixed service types

### Next Steps:
1. First, let's fix the import path issues as they are the most common:
   - Update tsconfig.json to properly configure path aliases
   - Fix all relative imports to use @/ prefix
   - Create missing type declaration files

2. Then move on to interface extension issues:
   - Fix OTPProps onChange type
   - Fix TooltipProps content type
   - Fix CalendarProps onSelect type
   - Fix SliderProps defaultValue type

### Notes:
- Many errors stem from incorrect import paths
- Need to ensure consistent use of @/ prefix for imports
- Several interface extensions have type mismatches
- Missing type declarations for key modules
- Some components need proper prop type definitions
- Service layer needs proper type definitions for methods

### Lessons Learned:
- Always use @/ prefix for imports to maintain consistency
- Ensure proper type declarations before extending interfaces
- Add proper type guards for API responses
- Use proper event handler types for form elements

## Current Task: Fix TypeScript Errors

### Error Categories:
1. UI Component Type Issues
   - [ ] Fix Drawer component type errors (Title and Description properties)
   - [ ] Fix Form component type errors (className and props typing)
   - [ ] Fix HoverCard content type errors
   - [ ] Fix InputOTP type errors
   - [ ] Fix component re-export conflicts in index.ts

2. Service Type Issues
   - [ ] Fix API service type errors
   - [ ] Fix Audit Logger service type errors
   - [ ] Fix Crisis Prediction service type errors
   - [ ] Fix Intervention Metrics service type errors
   - [ ] Fix Learning Path service type errors

3. Type Definition Issues
   - [ ] Fix missing type declarations
   - [ ] Fix type conflicts in index.ts
   - [ ] Fix incorrect type assignments
   - [ ] Fix missing module declarations

4. Authentication and Context Issues
   - [ ] Fix Auth context type errors
   - [ ] Fix Supabase client import issues
   - [ ] Fix session and user type errors

### Action Plan:
1. UI Component Fixes
   - [ ] Update @vaul/react types for Drawer component
   - [ ] Fix form component type definitions
   - [ ] Resolve component re-export conflicts
   - [ ] Update component prop types

2. Service Layer Fixes
   - [ ] Create proper type definitions for services
   - [ ] Fix service method signatures
   - [ ] Update service imports and exports
   - [ ] Add missing type declarations

3. Type System Cleanup
   - [ ] Organize and deduplicate type exports
   - [ ] Fix circular dependencies
   - [ ] Create missing type declaration files
   - [ ] Update type imports

4. Auth and Context Fixes
   - [ ] Update auth context types
   - [ ] Fix Supabase client setup
   - [ ] Update session management types

### Current Focus:
Starting with UI component fixes, specifically the Drawer component issues, as they appear to be blocking the most immediate functionality.

### Progress:
[X] Initial error analysis
[X] Categorized issues
[X] Created action plan
[ ] UI Component Fixes
[ ] Service Layer Fixes
[ ] Type System Cleanup
[ ] Auth and Context Fixes

### Next Steps:
1. Fix Drawer component type issues:
   - Update @vaul/react types
   - Add proper type declarations for Title and Description
   - Fix component prop types

2. Then move on to form component issues:
   - Fix className type errors
   - Update prop type definitions
   - Resolve rest parameter typing

### Notes:
- Many errors stem from missing or incorrect type declarations
- Some issues are related to third-party library types (@vaul/react)
- Need to ensure consistent type exports across the application
- Should consider creating a central types directory for better organization

## Current Task: Fix TypeScript Errors in Backend

### Error Analysis from Latest Type Check:
1. Express Type Issues:
   - [ ] Fix Request/Response type issues in app.ts
   - [ ] Add proper type definitions for Express middleware
   - [ ] Fix WebSocket type conflicts

2. Security Service Issues:
   - [ ] Fix SecurityIncident type missing 'resolved' property
   - [ ] Fix IncidentType string literal type issues
   - [ ] Add proper type exports for security config

3. Authentication Issues:
   - [ ] Add @simplewebauthn/server type declarations
   - [ ] Fix WebAuthn service type issues
   - [ ] Fix session type declarations

4. BAA Management Issues:
   - [ ] Export enum types from BAAManagementService
   - [ ] Fix HIPAAAuditEvent timestamp property
   - [ ] Fix audit service type conflicts

### Current Focus:
Working on Express type issues in app.ts, specifically:
1. Adding proper type declarations for Request/Response objects
2. Fixing property access on 'unknown' types
3. Adding proper type guards for request body validation

### Next Steps:
1. Fix Express type issues:
   ```typescript
   import { Request, Response } from 'express';
   
   interface TypedRequestBody<T> extends Request {
     body: T;
   }
   ```

2. Add security incident type fixes:
   ```typescript
   export interface SecurityIncident {
     type: IncidentType;
     severity: string;
     timestamp: Date;
     sourceIp: string;
     userId?: string;
     details: Record<string, unknown>;
     resolved: boolean;
   }
   ```

3. Install missing type declarations:
   ```bash
   pnpm add -D @types/simplewebauthn__server @types/express-session
   ```

### Progress:
[X] Identified all TypeScript errors from type-check
[X] Categorized errors by component/service
[X] Fixed Express type issues
[ ] Fixed Security Service types
[ ] Fixed Authentication types
[ ] Fixed BAA Management types

### Lessons Learned:
- Need to properly type Express request/response objects
- Always include required properties in interface definitions
- Export enum types when they're used across modules
- Use proper type guards for unknown types
- Install type declarations for external packages

## Current Task: Fix TypeScript type issues using ts:fix script

### Current Status:
Found existing fix-types.ts script with the following functionality:
- [X] Path alias fixes
- [X] Component prop types fixes
- [X] Unknown type fixes
- [X] Array callback fixes
- [X] Missing type declarations
- [X] React component type fixes
- [X] Event handler type fixes
- [X] Common TypeScript issue fixes

### Next Steps:
[ ] Add additional type fixes:
  - [ ] Add Supabase client type fixes
  - [ ] Add Express middleware type fixes
  - [ ] Add WebAuthn type fixes
  - [ ] Add BAA Management type fixes

[ ] Improve error reporting:
  - [ ] Add detailed error messages
  - [ ] Add line numbers to error reports
  - [ ] Add suggestions for manual fixes

[ ] Add type validation:
  - [ ] Validate fixed types against schema
  - [ ] Check for circular dependencies
  - [ ] Verify import/export consistency

[ ] Add testing:
  - [ ] Add unit tests for each fix function
  - [ ] Add integration tests
  - [ ] Add snapshot tests for before/after fixes

### Implementation Plan:
1. First, let's add the new type fixes:
   ```typescript
   // Supabase client type fixes
   function fixSupabaseTypes() {
     // Add type fixes for Supabase client
     // Fix session and user types
     // Add proper error handling
   }

   // Express middleware type fixes
   function fixExpressTypes() {
     // Add Request/Response type fixes
     // Add middleware type definitions
     // Fix route handler types
   }

   // WebAuthn type fixes
   function fixWebAuthnTypes() {
     // Add @simplewebauthn/server types
     // Fix authentication flow types
     // Add proper error handling
   }

   // BAA Management type fixes
   function fixBAATypes() {
     // Add enum type exports
     // Fix timestamp property types
     // Add proper audit event types
   }
   ```

2. Then improve error reporting:
   ```typescript
   interface TypeFixError {
     file: string;
     line: number;
     message: string;
     suggestion?: string;
   }

   function reportError(error: TypeFixError) {
     // Improved error reporting logic
   }
   ```

3. Add type validation:
   ```typescript
   function validateTypes() {
     // Type validation logic
     // Circular dependency checking
     // Import/export verification
   }
   ```

4. Add tests:
   ```typescript
   describe('Type Fixes', () => {
     // Test cases for each fix function
     // Integration tests
     // Snapshot tests
   })
   ```

### Progress:
[X] Analyzed existing script
[X] Identified missing functionality
[X] Created implementation plan
[X] Implemented Supabase client type fixes
  [X] Added import fixes
  [X] Added client instance type fixes
  [X] Added auth type fixes
  [X] Added database type fixes
[X] Implemented Express middleware type fixes
  [X] Added import fixes for Request, Response, NextFunction
  [X] Added middleware function type fixes
  [X] Added error handler type fixes
  [X] Added route handler type fixes
  [X] Added router declaration type fixes
[X] Implemented WebAuthn type fixes
  [X] Added server-side type imports
  [X] Added client-side type imports
  [X] Fixed WebAuthn service method types
  [X] Fixed WebAuthn request/response types
[X] Implemented BAA Management type fixes
  [X] Added enum exports
  [X] Added interface exports
  [X] Fixed timestamp property types
  [X] Fixed metadata types
  [X] Fixed service method types
[X] Added improved error reporting
  [X] Added error interfaces and types
  [X] Added error collection and reporting
  [X] Added per-file result tracking
  [X] Added detailed error messages
  [X] Added error suggestions
[X] Added type validation
  [X] Added validation interfaces and types
  [X] Added type error checking
  [X] Added circular dependency detection
  [X] Added unused export detection
  [X] Added type assertion warnings
[X] Added tests
  [X] Added test setup with temporary files
  [X] Added path alias fix tests
  [X] Added component prop type fix tests
  [X] Added unknown type fix tests
  [X] Added array callback fix tests
  [X] Added Express type fix tests
  [X] Added WebAuthn type fix tests
  [X] Added BAA Management type fix tests
  [X] Added type validation tests

### Next Action:
All planned tasks have been completed. The script is ready for use.

### Notes:
- Successfully added comprehensive test suite that covers:
  - All type fix functions
  - Type validation functionality
  - Error reporting system
  - Edge cases and error conditions
  - Temporary file handling
- Test suite uses isolated environment for each test
- Tests are descriptive and maintainable
- Consider adding:
  - Performance tests for large codebases
  - Integration tests with actual project files
  - Snapshot tests for complex fixes
  - More edge cases and error conditions

### Final Implementation Summary:
1. Type Fixes:
   - Path alias resolution
   - Component prop types
   - Unknown type handling
   - Array callback types
   - Express middleware types
   - WebAuthn service types
   - BAA Management types

2. Error Reporting:
   - Structured error types
   - Detailed error messages
   - File-specific tracking
   - Error suggestions
   - Summary statistics

3. Type Validation:
   - Type error detection
   - Circular dependency checks
   - Unused export detection
   - Type assertion warnings
   - Comprehensive reporting

4. Test Coverage:
   - Unit tests for all fixes
   - Validation tests
   - Error reporting tests
   - Edge case handling
   - Clean test environment

The script is now ready to help maintain type safety across the codebase.

## Analysis

### Current Setup

- Script: tsx scripts/fix-types.ts
- Dependencies:
  - TypeScript: ^5.7.3
  - TSX: ^4.19.2

## Plan

- [X] Check if scripts/fix-types.ts exists
- [ ] Create fix-types.ts script if missing
- [ ] Implement type fixing logic
- [ ] Test the implementation
