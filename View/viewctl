#!/bin/bash

# Copyright (c) 2024 View Systems, Inc. All rights reserved.
# This file is part of the View.io platform and is subject to the View Systems license terms.

# ################################################################################
# View.io viewctl Management Tool
# ################################################################################
#
# CAUTION: This script is an integral part of the View.io ecosystem. Modifications
# should only be performed by authorized system administrators with extensive
# knowledge of the View.io architecture and deployment paradigms.
#
# For detailed documentation and support, please refer to the official View.io
# Technical Operations Manual.
#
# Usage: ./viewctl [-cpu] [-h|--help] [-y] [-v|--version] {start|stop|restart|update|pull|stats|ps|cleanup|logs} [-a]
#
# This script provides a command-line interface for managing View.io services,
# including starting, stopping, updating, and monitoring the system.
#
# It supports both CPU and GPU environments, with automatic detection of NVIDIA GPUs.
# Use the -cpu flag to force CPU mode if needed.
#
# For full usage instructions, run: ./viewctl --help
#
# ################################################################################


cd "$(dirname "$0")" || exit
VERSION="1.0.1"

# Set up trap to catch Ctrl+C
interrupt_handler() {
  echo -e "\nScript interrupted. Exiting..."
  exit 1
}
trap interrupt_handler SIGINT
VIEW_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
source "${VIEW_DIR}"/working/installer/common_functions.sh

_title="
           _
      __ _(_)_____ __ __
      \ V | | -_) V  V /
       \_/|_|___|\_/\_/
      AI Data Management
    and Insights Platform
       https://view.io

"

log() {
  echo -e "$1"
}

show_banner() {
  log
  log "${BIPurple}$_title${NC}"
  log
}

# Function to display usage information
usage() {
  show_banner
  log "Usage: $0 [-cpu] [-h|--help] [-y] [-v|--version] {start|stop|dashboard|restart|update|pull|ps|stats|cleanup|logs|} [-a]"
  log "  -y             - Automatically answer yes to all prompts"
  log "  -cpu           - Force CPU mode, ignore GPU detection"
  log "  -h, --help     - Show this help message and exit"
  log "  -v, --version  - Display version information"
  log ""
  log "  start          - Start the View services"
  log "  update         - Update View to the latest version"
  log "  dashboard      - Show the dashboard URI"
  log "  stop           - Stop the View services"
  log "  restart        - Restart the View services"
  log "  logs           - Show View service logs"
  log "  pull           - Download the View containers"
  log "  ps             - Check the status of the View services"
  log "  stats          - Show resource usage statistics of View services"
  log "  cleanup        - Run docker system prune"
  log "     -a          - Use with cleanup to remove all images"
  log ""
  log "Environment Variables:"
  log "  VIEW_AUTO_YES  - Set to 'true' to automatically answer yes to all prompts"
  log "  FORCE_CPU      - Set to 'true' to force CPU mode and ignore GPU detection"
  log "  OLLAMA_IMAGE   - Override the default Ollama image"
  log "                     Default: 'ollama/ollama' or 'ghcr.io/amperecomputingai/ollama-ampere:0.0.6-ol9' for Ampere CPUs"
  log "Helpers:"

}
# Function to display version information
show_version() {
  show_banner
  log "View Control Script v$VERSION"
  exit 0
}

show_help() {
  usage
  log ""
  log "${Yellow}HINT: To use the viewctl commands from anywhere, add this directory to your PATH.${NC}"
  log "You can do this by adding the following line to your shell configuration file:"
  log "${Blue}export PATH=\"\$PATH:$(pwd)\"${NC}"
  log "For bash users, add this line to ~/.bashrc"
  log "For zsh users, add this line to ~/.zshrc"
  log "After adding the line, reload your shell configuration with:"
  log "${Blue}source ~/.bashrc${NC} (for bash users)"
  log "or"
  log "${Blue}source ~/.zshrc${NC} (for zsh users)"
  log ""
  log "For tab completion add"
}

apply_completion() {
    show_banner
    local completion_file

    completion_file="$(cd "$(dirname "$0")" && pwd)/viewctl-completion.sh"

    if [[ -f "$completion_file" ]]; then
        source "$completion_file"
        echo "Tab completion for viewctl has been enabled for this session."
        echo "To make it permanent, add the following line to your shell configuration file:"
        echo "source $completion_file"
    else
        echo "Completion file not found. Please ensure viewctl-completion.sh is in the same directory as viewctl."
    fi
}

# Parse arguments
if [ "${VIEW_AUTO_YES,,}" = "true" ]; then
  AUTO_YES=true
else
  AUTO_YES=false
fi
COMMAND=""
CLEANUP_ALL=false
FORCE_CPU=${FORCE_CPU:-false}

for arg in "$@"; do
  case $arg in
  -y)
    AUTO_YES=true
    ;;
  -a)
    CLEANUP_ALL=true
    ;;
  -v | --version)
    show_version
    ;;
  -h | --help)
    show_help
    exit 0
    ;;
  -cpu)
    FORCE_CPU=true
    ;;
  start | stop | restart | dashboard | update | pull | ps | stats | logs | cleanup | completion  )
    COMMAND=$arg
    ;;
  *)
    log "Unknown argument: $arg"
    usage
    exit 0
    ;;
  esac
done

if [ -z "$COMMAND" ]; then
  usage
  exit 0
fi

if [ "$FORCE_CPU" = true ]; then
  log "Forcing CPU mode."
  PROCESSOR_PROFILE="cpu"
else
  if command -v nvidia-smi >/dev/null 2>&1 && nvidia-smi >/dev/null 2>&1; then
    #log "NVIDIA GPU detected."
    PROCESSOR_PROFILE="gpu"
  else
    #log "No NVIDIA GPU detected."
    PROCESSOR_PROFILE="cpu"
  fi
fi

CPU_Part=$(grep -m 1 "part" /proc/cpuinfo | cut -d' ' -f3)
if [ "$CPU_Part" == "0xd0c" ]; then
  log "Ampere CPU Detected"
  export OLLAMA_IMAGE="ghcr.io/amperecomputingai/ollama-ampere:0.0.6-ol9"
else
  export OLLAMA_IMAGE="ollama/ollama"
fi

show_dashboard() {
  FQDN=$(hostname --fqdn)
  IPADDR=$(ip -o route get to 8.8.8.8 | sed -n 's/.*src \([0-9.]\+\).*/\1/p')
  echo
  echo "To access the dashboard open your browser to any of the following: "
  echo "  http://127.0.1.1:9000"
  echo "  http://${IPADDR}:9000"
  echo "  http://${FQDN}:9000"
  echo
}

# tail the latest logfile
show_logs() {
  log_dir="working/syslogserver/logs"
  if [ ! -d "$log_dir" ]; then
    log "Error: Log directory not found: $log_dir"
    exit 1
  fi
  local latest_log
  latest_log=$(ls -t "$log_dir" | head -n1)
  if [ -z "$latest_log" ]; then
    log "No log files found in $log_dir"
    exit 1
  fi

  log "Showing logs from: $log_dir/$latest_log"
  tail -f "$log_dir/$latest_log"
}

# Function to start services
start_services() {
  log "Starting View services..."
  read -t 10 -p "Do you want to pull the latest containers before starting? (Y/n, default: Y in 10 seconds) " response
  
  # Check the response
  case "$response" in
    [nN][oO]|[nN])
      log "Skipping pull_services..."
      ;;
    *)
      log "Running pull_services..."
      pull_services
      ;;
  esac
  
  docker compose -f compose.yaml --profile "$PROCESSOR_PROFILE" up -d
  show_dashboard
}

# Function to confirm action
confirm_action() {
  if [ "$AUTO_YES" = true ]; then
    return 0
  fi
  read -p "$1 (Y/n): " response
  case "$response" in
  [nN][oO] | [nN]) return 1 ;;
  *) return 0 ;;
  esac
}

# Function to stop services
stop_services() {
  if confirm_action "Are you sure you want to stop the View services?"; then
    if docker ps -q --filter name=ollama | grep -q .; then
      log "Stopping Ollama container..."
      docker stop ollama >/dev/null
      docker rm ollama >/dev/null
    fi
    log "Stopping View services..."
    docker compose -f compose.yaml --profile "$PROCESSOR_PROFILE" down --remove-orphans
  else
    log "Stop operation cancelled."
  fi
}

# Function to restart services
restart_services() {
  if confirm_action "Are you sure you want to restart the View services?"; then
    log "Restarting View services..."
    docker compose -f compose.yaml --profile "$PROCESSOR_PROFILE" stop
    docker compose -f compose.yaml --profile "$PROCESSOR_PROFILE" start
  else
    log "Restart operation cancelled."
  fi
  show_dashboard
}

pull_services() {
  log "Downloading View containers"
  docker compose -f compose.yaml --profile "$PROCESSOR_PROFILE" pull
}

# Function to update services
update_services() {
  log "Updating View services..."
  "${VIEW_DIR}"/helpers/updates.sh  --update

  docker compose -f compose.yaml --profile "$PROCESSOR_PROFILE" pull

  if confirm_action "Do you want to restart the View services?"; then
    docker compose -f compose.yaml --profile "$PROCESSOR_PROFILE" restart
  else
    log "View services updated but not restarted."
  fi
}

# Function to show docker compose stats
show_stats() {
  log "Showing stats for View services..."
  docker compose -f compose.yaml --profile "$PROCESSOR_PROFILE" stats
}

# Function to check ps of services
check_ps() {
  log "Checking ps of View services..."
  docker compose ps
}

cleanup_system() {
  if [ "$CLEANUP_ALL" = true ]; then
    if confirm_action "Warning: Running docker system prune -a will remove all unused images, not just dangling ones. This may require more time to restart services. Are you sure you want to continue?"; then
      log "Running docker system prune -a..."
      docker system prune -a --force
    else
      log "Cleanup operation cancelled."
      return
    fi
  else
    if confirm_action "Are you sure you want to run docker system prune?"; then
      log "Running docker system prune..."
      docker system prune --force
    else
      log "Cleanup operation cancelled."
      return
    fi
  fi
  log "Cleanup completed."
}



# Execute the command
case "$COMMAND" in
start)
  start_services
  ;;
stop)
  stop_services
  ;;
restart)
  restart_services
  ;;
update)
  update_services
  ;;
dashboard)
  show_dashboard
  ;;
ps)
  check_ps
  ;;
cleanup)
  cleanup_system
  ;;
stats)
  show_stats
  ;;
pull)
  pull_services
  ;;
logs)
  show_logs
  ;;
completion)
  apply_completion
  ;;
*)
  usage
  exit 0
  ;;
esac




# Colors and symbols
CHECK='\xe2\x9c\x85  '
NOPE='\xe2\x9d\x8c  '
NC='\033[0m'

# Regular Colors
Black="\033[0;30m"  # Black
Red="\033[0;31m"    # Red
Green="\033[0;32m"  # Green
Yellow="\033[0;33m" # Yellow
Blue="\033[0;34m"   # Blue
Purple="\033[0;35m" # Purple
Cyan="\033[0;36m"   # Cyan
White="\033[0;37m"  # White

# Bold
BBlack="\033[1;30m"  # Black
BRed="\033[1;31m"    # Red
BGreen="\033[1;32m"  # Green
BYellow="\033[1;33m" # Yellow
BBlue="\033[1;34m"   # Blue
BPurple="\033[1;35m" # Purple
BCyan="\033[1;36m"   # Cyan
BWhite="\033[1;37m"  # White

# Underline
UBlack="\033[4;30m"  # Black
URed="\033[4;31m"    # Red
UGreen="\033[4;32m"  # Green
UYellow="\033[4;33m" # Yellow
UBlue="\033[4;34m"   # Blue
UPurple="\033[4;35m" # Purple
UCyan="\033[4;36m"   # Cyan
UWhite="\033[4;37m"  # White

# Background
On_Black="\033[40m"  # Black
On_Red="\033[41m"    # Red
On_Green="\033[42m"  # Green
On_Yellow="\033[43m" # Yellow
On_Blue="\033[44m"   # Blue
On_Purple="\033[45m" # Purple
On_Cyan="\033[46m"   # Cyan
On_White="\033[47m"  # White

# High Intensty
IBlack="\033[0;90m"  # Black
IRed="\033[0;91m"    # Red
IGreen="\033[0;92m"  # Green
IYellow="\033[0;93m" # Yellow
IBlue="\033[0;94m"   # Blue
IPurple="\033[0;95m" # Purple
ICyan="\033[0;96m"   # Cyan
IWhite="\033[0;97m"  # White

# Bold High Intensty
BIBlack="\033[1;90m"  # Black
BIRed="\033[1;91m"    # Red
BIGreen="\033[1;92m"  # Green
BIYellow="\033[1;93m" # Yellow
BIBlue="\033[1;94m"   # Blue
BIPurple="\033[1;95m" # Purple
BICyan="\033[1;96m"   # Cyan
BIWhite="\033[1;97m"  # White

# High Intensty backgrounds
On_IBlack="\033[0;100m"  # Black
On_IRed="\033[0;101m"    # Red
On_IGreen="\033[0;102m"  # Green
On_IYellow="\033[0;103m" # Yellow
On_IBlue="\033[0;104m"   # Blue
On_IPurple="\033[10;95m" # Purple
On_ICyan="\033[0;106m"   # Cyan
On_IWhite="\033[0;107m"  # White

complete -F _viewctl_completions viewctl
exit 0
